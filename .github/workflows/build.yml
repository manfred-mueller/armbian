name: Build Armbian

on:
  repository_dispatch:
  workflow_dispatch:

env:
  UPLOAD_IMAGE: true
  CUSTOMIZATION_SCRIPT: userpatches/customize-image.sh
  KERNEL_CONFIG: config
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@v3 # Updated to the latest version

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Download source code
      run: |
        pwd
        echo $GITHUB_WORKSPACE
        git clone --depth=1 --branch=main https://github.com/armbian/build
     
    - name: Build Armbian image
      id: build
      run: |
        cd build
        ./compile.sh build BOARD=nanopineo BRANCH=legacy BUILD_MINIMAL=no BUILD_DESKTOP=yes KERNEL_CONFIGURE=no RELEASE=bookworm
        echo "status=success" >> $GITHUB_ENV
        cd output/images
        tar -zcvf /tmp/nanopi_neo_image.tar.gz *.img        

    - name: Upload Armbian image
      id: upload_image
      uses: actions/upload-artifact@v3 # Updated to the latest version
      if: env.status == 'success'
      with:
        name: Nanopi_neo_image
        path: /tmp/nanopi_neo_image.tar.gz
        
    - name: Set artifact_url
      id: set_artifact_url
      run: echo "artifact_url=${{ steps.upload_image.outputs.artifact-url }}" >> $GITHUB_ENV

    - name: Build summary
      id: build_summary
      run: |
        echo "| Property | Value |" >> summary.md
        echo "| :--- | :--- |" >> summary.md
        echo "| Name | NanoPi Neo |" >> summary.md
        echo "| Build | v${{ github.run_number }} |" >> summary.md
        echo "build=v${{ github.run_number }}" >> $GITHUB_ENV
        echo "name=NanoPi-Neo" >> $GITHUB_ENV
        echo "title=NanoPi Neo Bookworm minimal" >> $GITHUB_ENV
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ env.build }}"
        release_name: ${{ env.title }}
        body_path: summary.md
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./nanopi_neo_image.tar.gz
          asset_name: nanopi_neo_image.tar.gz
          asset_content_type: application/gzip
          
    - name: Remove old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: '7 days'
